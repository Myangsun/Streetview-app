"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault")["default"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PolyEditor = void 0;
var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _reactAmapUtils = require("@uiw/react-amap-utils");
var _reactAmapMap = require("@uiw/react-amap-map");
var PolyEditor = /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {
  var active = props.active,
    polyElement = props.polyElement;
  var _useMapContext = (0, _reactAmapMap.useMapContext)(),
    map = _useMapContext.map;
  var _useState = (0, _react.useState)(true),
    _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
    visiable = _useState2[0],
    setVisiable = _useState2[1];
  var _useState3 = (0, _react.useState)(),
    _useState4 = (0, _slicedToArray2["default"])(_useState3, 2),
    polyEditor = _useState4[0],
    setPolyEditor = _useState4[1];
  (0, _react.useImperativeHandle)(ref, function () {
    return (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, props), {}, {
      polyEditor: polyEditor
    });
  });
  (0, _react.useEffect)(function () {
    if (polyElement && map && !polyEditor && AMap && AMap.PolyEditor) {
      var instance = new AMap.PolyEditor(map, polyElement);
      polyElement.on('hide', function () {
        return setVisiable(false);
      });
      polyElement.on('show', function () {
        return setVisiable(true);
      });
      setPolyEditor(instance);
    }
  }, [polyElement]);
  (0, _react.useEffect)(function () {
    if (!polyEditor) {
      return;
    }
    if (visiable && !active) {
      polyEditor.close();
      props.onEnd && props.onEnd({
        type: 'end',
        target: props.polyElement
      });
    } else if (visiable && active) {
      polyEditor.open();
    } else if (!visiable && active) {
      polyEditor.close();
      props.onEnd && props.onEnd({
        type: 'end',
        target: props.polyElement
      });
    }
  }, [active, visiable]);
  (0, _reactAmapUtils.useEventProperties)(polyEditor, props, ['onEnd', 'onAddnode', 'onAdjust', 'onRemovenode']);
  return null;
});
exports.PolyEditor = PolyEditor;