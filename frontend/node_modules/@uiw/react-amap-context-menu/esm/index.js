import _extends from "@babel/runtime/helpers/extends";
import React, { useImperativeHandle, Fragment } from 'react';
import { useContextMenu } from './useContextMenu';
import Item from './Item';
import { jsx as _jsx } from "react/jsx-runtime";
export * from './useContextMenu';
export * from './Item';
export var ContextMenu = /*#__PURE__*/React.forwardRef((props, ref) => {
  var {
    contextMenu
  } = useContextMenu(props);
  useImperativeHandle(ref, () => _extends({}, props, {
    contextMenu
  }));
  var childs = React.Children.toArray(props.children);
  return /*#__PURE__*/_jsx(Fragment, {
    children: AMap && contextMenu && childs.map((child, key) => {
      if (! /*#__PURE__*/React.isValidElement(child)) return null;
      return /*#__PURE__*/React.cloneElement(child, _extends({}, child.props, {
        AMap,
        map: props.map,
        contextMenu,
        key
      }));
    })
  });
});
ContextMenu.Item = Item;