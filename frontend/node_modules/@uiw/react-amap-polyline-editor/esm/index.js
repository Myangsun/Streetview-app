import _extends from "@babel/runtime/helpers/extends";
import { forwardRef, useEffect, useImperativeHandle, useState } from 'react';
import { useEventProperties } from '@uiw/react-amap-utils';
import { useMapContext } from '@uiw/react-amap-map';
export var PolylineEditor = /*#__PURE__*/forwardRef((props, ref) => {
  var {
    active,
    polyline
  } = props;
  var {
    map
  } = useMapContext();
  var [visiable, setVisiable] = useState(true);
  var [polyEditor, setPolyEditor] = useState();
  useImperativeHandle(ref, () => _extends({}, props, {
    polyEditor
  }));
  useEffect(() => {
    if (polyline && map && !polyEditor && AMap && AMap.PolylineEditor) {
      var instance = new AMap.PolylineEditor(map, polyline);
      polyline.on('hide', () => setVisiable(false));
      polyline.on('show', () => setVisiable(true));
      setPolyEditor(instance);
    }
  }, [polyline]);
  useEffect(() => {
    if (!polyEditor) {
      return;
    }
    if (visiable && !active) {
      polyEditor.close();
      props.onEnd && props.onEnd({
        target: props.polyline
      });
    } else if (visiable && active) {
      polyEditor.open();
      props.onAdd && props.onAdd({
        target: props.polyline
      });
    } else if (!visiable && active) {
      polyEditor.close();
      props.onEnd && props.onEnd({
        target: props.polyline
      });
    }
  }, [active, visiable, polyEditor]);
  useEventProperties(polyEditor, props, ['onEnd', 'onAddnode', 'onRemovenode', 'onAdjust', 'onAdd']);
  return null;
});