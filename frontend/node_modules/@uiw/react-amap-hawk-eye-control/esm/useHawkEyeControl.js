import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
var _excluded = ["offset", "visiable"];
import { useEffect, useState } from 'react';
import { useVisiable } from '@uiw/react-amap-utils';
import { useMapContext } from '@uiw/react-amap-map';
export function useHawkEyeControl(props) {
  if (props === void 0) {
    props = {};
  }
  var [hawkEyeControl, setHawkEyeControl] = useState();
  var {
      offset,
      visiable
    } = props,
    other = _objectWithoutPropertiesLoose(props, _excluded);
  var {
    map
  } = useMapContext();
  useEffect(() => {
    if (map && !hawkEyeControl) {
      var instance;
      map.plugin(['AMap.HawkEye'], () => {
        instance = new AMap.HawkEye(_extends({
          offset: offset
        }, other));
        map.addControl(instance);
        setHawkEyeControl(instance);
      });
      return () => {
        if (instance && map) {
          map && map.removeControl(instance);
          setHawkEyeControl(undefined);
        }
      };
    }
  }, [map]);
  useVisiable(hawkEyeControl, visiable);
  return {
    hawkEyeControl,
    setHawkEyeControl
  };
}