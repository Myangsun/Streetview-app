import { useState, useMemo, useEffect } from 'react';
export var useWeather = function useWeather(props) {
  if (props === void 0) {
    props = {};
  }
  var {
    city = '',
    type = 'live',
    onComplete,
    onError
  } = props;
  var [weather, setWeather] = useState();
  var funName = type === 'live' ? 'getLive' : 'getForecast';
  function getData(instance) {
    if (type && city && /^(live|forecast)$/.test(type)) {
      instance[funName](city, (err, data) => {
        if (err && onError) {
          onError(err);
        } else if (data && onComplete) {
          onComplete(data);
        }
      });
    }
  }
  useEffect(() => {
    if (AMap && !weather) {
      var instance;
      AMap.plugin(['AMap.Weather'], () => {
        instance = new AMap.Weather();
        setWeather(instance);
      });
      return () => {
        if (instance) {
          setWeather(undefined);
        }
      };
    }
  }, []);
  useMemo(() => {
    if (weather && city && type) {
      getData(weather);
    }
  }, [weather, city, type]);
  return {
    weather,
    setWeather
  };
};