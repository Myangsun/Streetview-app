"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault")["default"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useText = void 0;
var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = require("react");
var _reactAmapUtils = require("@uiw/react-amap-utils");
var _reactAmapMap = require("@uiw/react-amap-map");
var _excluded = ["visiable"];
var useText = function useText() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var visiable = props.visiable,
    other = (0, _objectWithoutProperties2["default"])(props, _excluded);
  var _useState = (0, _react.useState)(),
    _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
    text = _useState2[0],
    setText = _useState2[1];
  var _useMapContext = (0, _reactAmapMap.useMapContext)(),
    map = _useMapContext.map;
  var _usePortal = (0, _reactAmapUtils.usePortal)(),
    container = _usePortal.container,
    Portal = _usePortal.Portal;
  (0, _react.useEffect)(function () {
    if (!AMap || !map) return;
    if (!text) {
      if (props.children) {
        other.text = container.innerHTML;
      }
      var instance = new AMap.Text((0, _objectSpread2["default"])({}, other));
      map.add(instance);
      setText(instance);
      return function () {
        if (instance) {
          instance.remove();
          setText(undefined);
        }
      };
    }
  }, [map]);
  (0, _react.useEffect)(function () {
    if (text) {
      text.setText(props.children ? container.innerHTML : props.text || '');
    }
  }, [props.children, props.text, container, text]);
  (0, _reactAmapUtils.useVisiable)(text, visiable);
  (0, _reactAmapUtils.useSettingProperties)(text, props, ['Style', 'Title', 'Clickable', 'Draggable', 'Map', 'Position', 'Offset', 'Angle', 'zIndex', 'Top', 'Cursor', 'ExtData']);
  (0, _reactAmapUtils.useEventProperties)(text, props, ['onMoving', 'onTouchMove', 'onTouchEnd', 'onMoveaLong', 'onTouchStart', 'onMoveEnd', 'onClick', 'onDblClick', 'onRightClick', 'onMouseMove', 'onMouseOver', 'onMouseOut', 'onMouseDown', 'onMouseUp', 'onDragStart', 'onDragEnd', 'onDragging']);
  return {
    text: text,
    setText: setText,
    TextPortal: Portal
  };
};
exports.useText = useText;