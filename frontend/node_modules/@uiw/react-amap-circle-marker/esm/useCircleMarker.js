import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
var _excluded = ["visiable"];
import { useState, useEffect } from 'react';
import { useVisiable, useEventProperties, useSettingProperties } from '@uiw/react-amap-utils';
import { useMapContext } from '@uiw/react-amap-map';
export var useCircleMarker = function useCircleMarker(props) {
  if (props === void 0) {
    props = {};
  }
  var {
      visiable
    } = props,
    other = _objectWithoutPropertiesLoose(props, _excluded);
  var {
    map
  } = useMapContext();
  var [circleMarker, setCircleMarker] = useState();
  useEffect(() => {
    if (!AMap || !map) return;
    if (!circleMarker) {
      var instance = new AMap.CircleMarker(_extends({}, other));
      map.add(instance);
      setCircleMarker(instance);
      return () => {
        if (instance) {
          if (AMap.v) {
            map && map.remove(instance);
          } else {
            // 暂不使用这个 API，这个不兼容 v1.4.xx，改用 map.remove API
            map && map.removeLayer(instance);
          }
          setCircleMarker(undefined);
        }
      };
    }
  }, [map]);
  useVisiable(circleMarker, visiable);
  useSettingProperties(circleMarker, props, ['Center', 'Raius', 'zIndex', 'Bubble', 'Cursor', 'StrokeColor', 'StrokeOpacity', 'StrokeWeight', 'FillColor', 'FillOpacity', 'Draggable', 'ExtData']);
  useEventProperties(circleMarker, props, ['onHide', 'onShow', 'onMouseover', 'onTouchend', 'onClick', 'onTouchmove', 'onRightclick', 'onMouseup', 'onMouseout', 'onTouchstart', 'onMousedown', 'onDblclick']);
  return {
    circleMarker,
    setCircleMarker
  };
};