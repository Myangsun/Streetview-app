import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import _extends from "@babel/runtime/helpers/extends";
var _excluded = ["className", "children"];
/// <reference types="@uiw/react-amap-types" />
import React, { useRef, useEffect, useImperativeHandle, Fragment, Children, cloneElement, isValidElement, forwardRef, useReducer } from 'react';
import { useMap } from './useMap';
import { Context, reducer, initialState } from './context';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
export * from './useMap';
export * from './context';
export var Provider = props => {
  var [state, dispatch] = useReducer(reducer, initialState);
  return /*#__PURE__*/_jsx(Context.Provider, {
    value: _extends({}, state, {
      state,
      dispatch
    }),
    children: props.children
  });
};
export var Map = /*#__PURE__*/forwardRef((_ref, ref) => {
  var {
      className,
      children
    } = _ref,
    props = _objectWithoutPropertiesLoose(_ref, _excluded);
  var AMap = window.AMap;
  var [state, dispatch] = useReducer(reducer, initialState);
  var elmRef = useRef(null);
  var {
    setContainer,
    container,
    map
  } = useMap(_extends({
    container: props.container || elmRef.current
  }, props));
  useEffect(() => setContainer(elmRef.current), [elmRef.current]);
  useImperativeHandle(ref, () => _extends({}, props, {
    map,
    AMap,
    container: props.container || elmRef.current
  }), [map]);
  var childs = Children.toArray(children);
  useEffect(() => {
    if (map) {
      dispatch({
        map,
        container: elmRef.current,
        AMap
      });
    }
  }, [map]);
  return /*#__PURE__*/_jsxs(Context.Provider, {
    value: _extends({}, state, {
      state,
      dispatch
    }),
    children: [!props.container && /*#__PURE__*/_jsx("div", {
      ref: elmRef,
      className: className,
      style: _extends({
        fontSize: 1,
        width: '100%',
        height: '100%'
      }, props.style)
    }), AMap && map && typeof children === 'function' && children({
      AMap,
      map,
      container
    }), AMap && map && childs.map((child, key) => {
      if (! /*#__PURE__*/isValidElement(child)) return null;
      if (typeof child === 'string') {
        return /*#__PURE__*/cloneElement( /*#__PURE__*/_jsx(Fragment, {
          children: child
        }), {
          key
        });
      }
      if (child.type && typeof child.type === 'string') {
        return /*#__PURE__*/cloneElement(child, {
          key
        });
      }
      return /*#__PURE__*/cloneElement(child, _extends({}, child.props, {
        AMap,
        map,
        container,
        key
      }));
    })]
  });
});