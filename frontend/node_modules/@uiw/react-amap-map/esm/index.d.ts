/// <reference types="@uiw/react-amap-types" />
/// <reference types="@uiw/react-amap-types" />
/// <reference types="@uiw/react-amap-types" />
/// <reference types="@uiw/react-amap-types" />
/// <reference types="@uiw/react-amap-types" />
/// <reference types="@uiw/react-amap-types" />
/// <reference types="@uiw/react-amap-types" />
/// <reference types="@uiw/react-amap-types" />
/// <reference types="@uiw/react-amap-types" />
import React, { FC, PropsWithChildren } from 'react';
export * from './useMap';
export * from './context';
type RenderProps = {
    children?: (data: {
        AMap: typeof AMap;
        map: AMap.Map;
        container?: HTMLDivElement | null;
    }) => undefined;
} | {
    children?: React.ReactNode;
};
export interface MapProps extends AMap.MapEvents, AMap.MapOptions {
    className?: React.HTMLAttributes<HTMLDivElement>['className'];
    style?: React.HTMLAttributes<HTMLDivElement>['style'];
    container?: HTMLDivElement | null;
    children?: JSX.Element & RenderProps['children'];
}
export declare const Provider: FC<PropsWithChildren<RenderProps>>;
export declare const Map: React.ForwardRefExoticComponent<(MapProps & RenderProps) & React.RefAttributes<MapProps & {
    map?: AMap.Map | undefined;
}>>;
