import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
var _excluded = ["visiable", "children", "text", "icon"];
import { useState, useEffect } from 'react';
import { useVisiable, useEventProperties, useSettingProperties } from '@uiw/react-amap-utils';
import { useMapContext } from '@uiw/react-amap-map';
export var useLabelMarker = function useLabelMarker(props) {
  if (props === void 0) {
    props = {};
  }
  var {
      visiable,
      text,
      icon
    } = props,
    other = _objectWithoutPropertiesLoose(props, _excluded);
  var {
    map,
    AMap
  } = useMapContext();
  var [labelMarker, setLabelMarker] = useState();
  // const { container, Portal } = usePortal();

  useEffect(() => {
    if (!labelMarker && map) {
      var _v;
      var initText = text;
      if (!text) {
        initText = {
          // 要展示的文字内容
          content: '',
          // 文字方向，有 icon 时为围绕文字的方向，没有 icon 时，则为相对 position 的位置
          direction: 'right',
          // 在 direction 基础上的偏移量
          offset: [-20, -5],
          // 文字样式
          style: {
            // 字体大小
            fontSize: 12,
            // 字体颜色
            fillColor: '#22886f',
            // 描边颜色
            strokeColor: '#fff',
            // 描边宽度
            strokeWidth: 2
          }
        };
      }
      var initIcon = icon;
      if (!initIcon) {
        initIcon = {
          // 图标类型，现阶段只支持 image 类型
          // 图片 url
          image: 'http://webapi.amap.com/theme/v1.3/markers/b/mark_bs.png',
          // 图片尺寸
          size: [19, 32],
          // 图片相对 position 的锚点，默认为 bottom-center
          anchor: 'center'
        };
      }

      // if (props.children) {
      //   other.content = container;
      // }
      var instance = new AMap.LabelMarker(_extends({
        style: initIcon,
        icon: initIcon,
        text: initText
      }, other));
      setLabelMarker(instance);

      //  issue #259  兼容 v1.4.xxx 版本
      if ((AMap == null ? void 0 : (_v = AMap.v) == null ? void 0 : _v.indexOf('1.4')) === 0) {
        var labelMarkersLayer;
        if (map.labelMarkersLayer) {
          labelMarkersLayer = map.labelMarkersLayer;
        } else {
          map.labelMarkersLayer = labelMarkersLayer = new AMap.LabelsLayer({
            zooms: [3, 20],
            zIndex: 101,
            collision: true,
            animation: true
          });
          map.add(labelMarkersLayer);
        }
        labelMarkersLayer.add(instance);
      }
      map.add(instance);
    }
    return () => {
      if (labelMarker) {
        var _v2;
        //  issue #259  兼容 v1.4.xxx 版本
        if ((AMap == null ? void 0 : (_v2 = AMap.v) == null ? void 0 : _v2.indexOf('1.4')) === 0) {
          var _labelMarkersLayer;
          map == null ? void 0 : (_labelMarkersLayer = map.labelMarkersLayer) == null ? void 0 : _labelMarkersLayer.remove(labelMarker);
        }
        setLabelMarker(undefined);
      }
    };
  }, [labelMarker, map]);
  useVisiable(labelMarker, visiable);
  useSettingProperties(labelMarker, props, ['Name', 'Position', 'Zooms', 'Opacity', 'zIndex', 'Rank', 'Text', 'Icon', 'ExtData', 'Top']);
  useEventProperties(labelMarker, props, ['onMousedown', 'onMouseup', 'onTouchstart', 'onTouchmove', 'onTouchend', 'onClick', 'onMousemove', 'onMouseover', 'onMouseout']);
  return {
    labelMarker,
    setLabelMarker
  };
};