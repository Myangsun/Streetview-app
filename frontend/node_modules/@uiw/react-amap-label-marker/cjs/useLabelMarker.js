"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault")["default"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useLabelMarker = void 0;
var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = require("react");
var _reactAmapUtils = require("@uiw/react-amap-utils");
var _reactAmapMap = require("@uiw/react-amap-map");
var _excluded = ["visiable", "children", "text", "icon"];
var useLabelMarker = function useLabelMarker() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var visiable = props.visiable,
    children = props.children,
    text = props.text,
    icon = props.icon,
    other = (0, _objectWithoutProperties2["default"])(props, _excluded);
  var _useMapContext = (0, _reactAmapMap.useMapContext)(),
    map = _useMapContext.map,
    AMap = _useMapContext.AMap;
  var _useState = (0, _react.useState)(),
    _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
    labelMarker = _useState2[0],
    setLabelMarker = _useState2[1];
  // const { container, Portal } = usePortal();

  (0, _react.useEffect)(function () {
    if (!labelMarker && map) {
      var _v;
      var initText = text;
      if (!text) {
        initText = {
          // 要展示的文字内容
          content: '',
          // 文字方向，有 icon 时为围绕文字的方向，没有 icon 时，则为相对 position 的位置
          direction: 'right',
          // 在 direction 基础上的偏移量
          offset: [-20, -5],
          // 文字样式
          style: {
            // 字体大小
            fontSize: 12,
            // 字体颜色
            fillColor: '#22886f',
            // 描边颜色
            strokeColor: '#fff',
            // 描边宽度
            strokeWidth: 2
          }
        };
      }
      var initIcon = icon;
      if (!initIcon) {
        initIcon = {
          // 图标类型，现阶段只支持 image 类型
          // 图片 url
          image: 'http://webapi.amap.com/theme/v1.3/markers/b/mark_bs.png',
          // 图片尺寸
          size: [19, 32],
          // 图片相对 position 的锚点，默认为 bottom-center
          anchor: 'center'
        };
      }

      // if (props.children) {
      //   other.content = container;
      // }
      var instance = new AMap.LabelMarker((0, _objectSpread2["default"])({
        style: initIcon,
        icon: initIcon,
        text: initText
      }, other));
      setLabelMarker(instance);

      //  issue #259  兼容 v1.4.xxx 版本
      if ((AMap === null || AMap === void 0 ? void 0 : (_v = AMap.v) === null || _v === void 0 ? void 0 : _v.indexOf('1.4')) === 0) {
        var labelMarkersLayer;
        if (map.labelMarkersLayer) {
          labelMarkersLayer = map.labelMarkersLayer;
        } else {
          map.labelMarkersLayer = labelMarkersLayer = new AMap.LabelsLayer({
            zooms: [3, 20],
            zIndex: 101,
            collision: true,
            animation: true
          });
          map.add(labelMarkersLayer);
        }
        labelMarkersLayer.add(instance);
      }
      map.add(instance);
    }
    return function () {
      if (labelMarker) {
        var _v2;
        //  issue #259  兼容 v1.4.xxx 版本
        if ((AMap === null || AMap === void 0 ? void 0 : (_v2 = AMap.v) === null || _v2 === void 0 ? void 0 : _v2.indexOf('1.4')) === 0) {
          var _labelMarkersLayer;
          map === null || map === void 0 ? void 0 : (_labelMarkersLayer = map.labelMarkersLayer) === null || _labelMarkersLayer === void 0 ? void 0 : _labelMarkersLayer.remove(labelMarker);
        }
        setLabelMarker(undefined);
      }
    };
  }, [labelMarker, map]);
  (0, _reactAmapUtils.useVisiable)(labelMarker, visiable);
  (0, _reactAmapUtils.useSettingProperties)(labelMarker, props, ['Name', 'Position', 'Zooms', 'Opacity', 'zIndex', 'Rank', 'Text', 'Icon', 'ExtData', 'Top']);
  (0, _reactAmapUtils.useEventProperties)(labelMarker, props, ['onMousedown', 'onMouseup', 'onTouchstart', 'onTouchmove', 'onTouchend', 'onClick', 'onMousemove', 'onMouseover', 'onMouseout']);
  return {
    labelMarker: labelMarker,
    setLabelMarker: setLabelMarker
  };
};
exports.useLabelMarker = useLabelMarker;