"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault")["default"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useTileLayer = useTileLayer;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _reactAmapUtils = require("@uiw/react-amap-utils");
var _reactAmapMap = require("@uiw/react-amap-map");
var _index = require("./index");
function useTileLayer() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var _useState = (0, _react.useState)(),
    _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
    tileLayer = _useState2[0],
    setTileLayer = _useState2[1];
  var visiable = props.visiable,
    type = props.type,
    options = props.options;
  var _useMapContext = (0, _reactAmapMap.useMapContext)(),
    map = _useMapContext.map;
  (0, _react.useEffect)(function () {
    if (map) {
      var instance = null;
      if (type) {
        switch (type) {
          case _index.TileLayerType.ROADNET:
            instance = new AMap.TileLayer.RoadNet({});
            break;
          case _index.TileLayerType.SATELLITE:
            instance = new AMap.TileLayer.Satellite({});
            break;
          case _index.TileLayerType.TRAFFIC:
            instance = new AMap.TileLayer.Traffic({});
            break;
        }
      }
      if (options) {
        instance = new AMap.TileLayer(options);
      }
      if (!!instance) {
        // 暂不使用这个 API，这个不兼容 v1.4.xx
        // map.addLayer(instance);
        map.add(instance);
        props.onAdded && props.onAdded();
        setTileLayer(instance);
      }
      return function () {
        if (instance) {
          if (AMap.v) {
            map && map.remove(instance);
          } else {
            // 暂不使用这个 API，这个不兼容 v1.4.xx，改用 map.remove API
            map && map.removeLayer(instance);
          }
          setTileLayer(null);
          props.onRemoved && props.onRemoved();
        }
      };
    }
  }, [map, type, options]);
  (0, _reactAmapUtils.useVisiable)(tileLayer, visiable);
  return {
    tileLayer: tileLayer,
    setTileLayer: setTileLayer
  };
}