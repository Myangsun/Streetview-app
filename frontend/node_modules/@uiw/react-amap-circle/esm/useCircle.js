import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
var _excluded = ["visiable"];
import { useState, useEffect } from 'react';
import { useVisiable, useEventProperties, useSettingProperties } from '@uiw/react-amap-utils';
import { useMapContext } from '@uiw/react-amap-map';
export var useCircle = function useCircle(props) {
  if (props === void 0) {
    props = {};
  }
  var {
      visiable
    } = props,
    other = _objectWithoutPropertiesLoose(props, _excluded);
  var {
    map
  } = useMapContext();
  var [circle, setCircle] = useState();
  useEffect(() => {
    if (AMap && map && !circle) {
      var instance = new AMap.Circle(_extends({}, other));
      map.add(instance);
      setCircle(instance);
    }
    return () => {
      setCircle(circle => {
        if (circle) {
          map && map.remove(circle);
        }
        return undefined;
      });
    };
  }, [map]);
  useVisiable(circle, visiable);
  useSettingProperties(circle, props, ['Center', 'Raius', 'Options', 'ExtData']);
  useEventProperties(circle, props, ['onHide', 'onShow', 'onRightClick', 'onClick', 'onTouchEnd', 'onDblClick', 'onTouchMove', 'onTouchStart', 'onMouseOut', 'onMouseOver', 'onMouseUp', 'onMouseDown']);
  return {
    circle,
    setCircle
  };
};