import _extends from "@babel/runtime/helpers/extends";
import { forwardRef, useEffect, useImperativeHandle, useState } from 'react';
import { useEventProperties } from '@uiw/react-amap-utils';
import { useMapContext } from '@uiw/react-amap-map';
export var MouseToolDrawType = /*#__PURE__*/function (MouseToolDrawType) {
  MouseToolDrawType[MouseToolDrawType["MARKER"] = 0] = "MARKER";
  MouseToolDrawType[MouseToolDrawType["POLYLINE"] = 1] = "POLYLINE";
  MouseToolDrawType[MouseToolDrawType["POLYGON"] = 2] = "POLYGON";
  MouseToolDrawType[MouseToolDrawType["CIRCLE"] = 3] = "CIRCLE";
  MouseToolDrawType[MouseToolDrawType["RECTANGLE"] = 4] = "RECTANGLE";
  MouseToolDrawType[MouseToolDrawType["MEASUREAREA"] = 5] = "MEASUREAREA";
  MouseToolDrawType[MouseToolDrawType["RULE"] = 6] = "RULE";
  MouseToolDrawType[MouseToolDrawType["RECTZOOMIN"] = 7] = "RECTZOOMIN";
  MouseToolDrawType[MouseToolDrawType["RECTZOOMOUT"] = 8] = "RECTZOOMOUT";
  return MouseToolDrawType;
}({});
export var MouseTool = /*#__PURE__*/forwardRef((props, ref) => {
  var {
    active,
    type,
    drawElementOptions,
    ifClear
  } = props;
  var {
    map
  } = useMapContext();
  var [mouseTool, setMouseTool] = useState();
  useImperativeHandle(ref, () => _extends({}, props, {
    mouseTool: mouseTool
  }));
  useEffect(() => {
    if (map && !mouseTool && AMap && AMap.MouseTool) {
      var instance = new AMap.MouseTool(map);
      setMouseTool(instance);
    }
  }, [map, Map, AMap.MouseTool]);
  useEffect(() => {
    if (!mouseTool) {
      return;
    }
    if (!active) {
      mouseTool.close(ifClear);
    } else {
      switch (type) {
        case MouseToolDrawType.MARKER:
          mouseTool.marker(drawElementOptions ? drawElementOptions : {});
          break;
        case MouseToolDrawType.POLYLINE:
          mouseTool.polyline(drawElementOptions ? drawElementOptions : {});
          break;
        case MouseToolDrawType.POLYGON:
          mouseTool.polygon(drawElementOptions ? drawElementOptions : {});
          break;
        case MouseToolDrawType.CIRCLE:
          mouseTool.circle(drawElementOptions ? drawElementOptions : {});
          break;
        case MouseToolDrawType.RECTANGLE:
          mouseTool.rectangle(drawElementOptions ? drawElementOptions : {});
          break;
        case MouseToolDrawType.MEASUREAREA:
          mouseTool.measureArea(drawElementOptions ? drawElementOptions : {});
          break;
        case MouseToolDrawType.RULE:
          mouseTool.rule(drawElementOptions ? drawElementOptions : {});
          break;
        case MouseToolDrawType.RECTZOOMIN:
          mouseTool.rectZoomIn(drawElementOptions ? drawElementOptions : {});
          break;
        case MouseToolDrawType.RECTZOOMOUT:
          mouseTool.rectZoomOut(drawElementOptions ? drawElementOptions : {});
          break;
      }
    }
  }, [active, ifClear]);
  useEventProperties(mouseTool, props, ['onDraw']);
  return null;
});