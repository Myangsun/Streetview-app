"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault")["default"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MouseToolDrawType = exports.MouseTool = void 0;
var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _reactAmapUtils = require("@uiw/react-amap-utils");
var _reactAmapMap = require("@uiw/react-amap-map");
var MouseToolDrawType = /*#__PURE__*/function (MouseToolDrawType) {
  MouseToolDrawType[MouseToolDrawType["MARKER"] = 0] = "MARKER";
  MouseToolDrawType[MouseToolDrawType["POLYLINE"] = 1] = "POLYLINE";
  MouseToolDrawType[MouseToolDrawType["POLYGON"] = 2] = "POLYGON";
  MouseToolDrawType[MouseToolDrawType["CIRCLE"] = 3] = "CIRCLE";
  MouseToolDrawType[MouseToolDrawType["RECTANGLE"] = 4] = "RECTANGLE";
  MouseToolDrawType[MouseToolDrawType["MEASUREAREA"] = 5] = "MEASUREAREA";
  MouseToolDrawType[MouseToolDrawType["RULE"] = 6] = "RULE";
  MouseToolDrawType[MouseToolDrawType["RECTZOOMIN"] = 7] = "RECTZOOMIN";
  MouseToolDrawType[MouseToolDrawType["RECTZOOMOUT"] = 8] = "RECTZOOMOUT";
  return MouseToolDrawType;
}({});
exports.MouseToolDrawType = MouseToolDrawType;
var MouseTool = /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {
  var active = props.active,
    type = props.type,
    drawElementOptions = props.drawElementOptions,
    ifClear = props.ifClear;
  var _useMapContext = (0, _reactAmapMap.useMapContext)(),
    map = _useMapContext.map;
  var _useState = (0, _react.useState)(),
    _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
    mouseTool = _useState2[0],
    setMouseTool = _useState2[1];
  (0, _react.useImperativeHandle)(ref, function () {
    return (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, props), {}, {
      mouseTool: mouseTool
    });
  });
  (0, _react.useEffect)(function () {
    if (map && !mouseTool && AMap && AMap.MouseTool) {
      var instance = new AMap.MouseTool(map);
      setMouseTool(instance);
    }
  }, [map, Map, AMap.MouseTool]);
  (0, _react.useEffect)(function () {
    if (!mouseTool) {
      return;
    }
    if (!active) {
      mouseTool.close(ifClear);
    } else {
      switch (type) {
        case MouseToolDrawType.MARKER:
          mouseTool.marker(drawElementOptions ? drawElementOptions : {});
          break;
        case MouseToolDrawType.POLYLINE:
          mouseTool.polyline(drawElementOptions ? drawElementOptions : {});
          break;
        case MouseToolDrawType.POLYGON:
          mouseTool.polygon(drawElementOptions ? drawElementOptions : {});
          break;
        case MouseToolDrawType.CIRCLE:
          mouseTool.circle(drawElementOptions ? drawElementOptions : {});
          break;
        case MouseToolDrawType.RECTANGLE:
          mouseTool.rectangle(drawElementOptions ? drawElementOptions : {});
          break;
        case MouseToolDrawType.MEASUREAREA:
          mouseTool.measureArea(drawElementOptions ? drawElementOptions : {});
          break;
        case MouseToolDrawType.RULE:
          mouseTool.rule(drawElementOptions ? drawElementOptions : {});
          break;
        case MouseToolDrawType.RECTZOOMIN:
          mouseTool.rectZoomIn(drawElementOptions ? drawElementOptions : {});
          break;
        case MouseToolDrawType.RECTZOOMOUT:
          mouseTool.rectZoomOut(drawElementOptions ? drawElementOptions : {});
          break;
      }
    }
  }, [active, ifClear]);
  (0, _reactAmapUtils.useEventProperties)(mouseTool, props, ['onDraw']);
  return null;
});
exports.MouseTool = MouseTool;