{"ast":null,"code":"import { useState, useMemo, useEffect } from 'react';\nexport var useWeather = function useWeather(props) {\n  if (props === void 0) {\n    props = {};\n  }\n  var {\n    city = '',\n    type = 'live',\n    onComplete,\n    onError\n  } = props;\n  var [weather, setWeather] = useState();\n  var funName = type === 'live' ? 'getLive' : 'getForecast';\n  function getData(instance) {\n    if (type && city && /^(live|forecast)$/.test(type)) {\n      instance[funName](city, (err, data) => {\n        if (err && onError) {\n          onError(err);\n        } else if (data && onComplete) {\n          onComplete(data);\n        }\n      });\n    }\n  }\n  useEffect(() => {\n    if (AMap && !weather) {\n      var instance;\n      AMap.plugin(['AMap.Weather'], () => {\n        instance = new AMap.Weather();\n        setWeather(instance);\n      });\n      return () => {\n        if (instance) {\n          setWeather(undefined);\n        }\n      };\n    }\n  }, []);\n  useMemo(() => {\n    if (weather && city && type) {\n      getData(weather);\n    }\n  }, [weather, city, type]);\n  return {\n    weather,\n    setWeather\n  };\n};","map":{"version":3,"names":["useState","useMemo","useEffect","useWeather","props","city","type","onComplete","onError","weather","setWeather","funName","getData","instance","test","err","data","AMap","plugin","Weather","undefined"],"sources":["/Users/mingyang/Desktop/Application/AIGC/urban track/streetview app/frontend/node_modules/@uiw/react-amap-weather/esm/useWeather.js"],"sourcesContent":["import { useState, useMemo, useEffect } from 'react';\nexport var useWeather = function useWeather(props) {\n  if (props === void 0) {\n    props = {};\n  }\n  var {\n    city = '',\n    type = 'live',\n    onComplete,\n    onError\n  } = props;\n  var [weather, setWeather] = useState();\n  var funName = type === 'live' ? 'getLive' : 'getForecast';\n  function getData(instance) {\n    if (type && city && /^(live|forecast)$/.test(type)) {\n      instance[funName](city, (err, data) => {\n        if (err && onError) {\n          onError(err);\n        } else if (data && onComplete) {\n          onComplete(data);\n        }\n      });\n    }\n  }\n  useEffect(() => {\n    if (AMap && !weather) {\n      var instance;\n      AMap.plugin(['AMap.Weather'], () => {\n        instance = new AMap.Weather();\n        setWeather(instance);\n      });\n      return () => {\n        if (instance) {\n          setWeather(undefined);\n        }\n      };\n    }\n  }, []);\n  useMemo(() => {\n    if (weather && city && type) {\n      getData(weather);\n    }\n  }, [weather, city, type]);\n  return {\n    weather,\n    setWeather\n  };\n};"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,OAAO,EAAEC,SAAS,QAAQ,OAAO;AACpD,OAAO,IAAIC,UAAU,GAAG,SAASA,UAAUA,CAACC,KAAK,EAAE;EACjD,IAAIA,KAAK,KAAK,KAAK,CAAC,EAAE;IACpBA,KAAK,GAAG,CAAC,CAAC;EACZ;EACA,IAAI;IACFC,IAAI,GAAG,EAAE;IACTC,IAAI,GAAG,MAAM;IACbC,UAAU;IACVC;EACF,CAAC,GAAGJ,KAAK;EACT,IAAI,CAACK,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,CAAC;EACtC,IAAIW,OAAO,GAAGL,IAAI,KAAK,MAAM,GAAG,SAAS,GAAG,aAAa;EACzD,SAASM,OAAOA,CAACC,QAAQ,EAAE;IACzB,IAAIP,IAAI,IAAID,IAAI,IAAI,mBAAmB,CAACS,IAAI,CAACR,IAAI,CAAC,EAAE;MAClDO,QAAQ,CAACF,OAAO,CAAC,CAACN,IAAI,EAAE,CAACU,GAAG,EAAEC,IAAI,KAAK;QACrC,IAAID,GAAG,IAAIP,OAAO,EAAE;UAClBA,OAAO,CAACO,GAAG,CAAC;QACd,CAAC,MAAM,IAAIC,IAAI,IAAIT,UAAU,EAAE;UAC7BA,UAAU,CAACS,IAAI,CAAC;QAClB;MACF,CAAC,CAAC;IACJ;EACF;EACAd,SAAS,CAAC,MAAM;IACd,IAAIe,IAAI,IAAI,CAACR,OAAO,EAAE;MACpB,IAAII,QAAQ;MACZI,IAAI,CAACC,MAAM,CAAC,CAAC,cAAc,CAAC,EAAE,MAAM;QAClCL,QAAQ,GAAG,IAAII,IAAI,CAACE,OAAO,CAAC,CAAC;QAC7BT,UAAU,CAACG,QAAQ,CAAC;MACtB,CAAC,CAAC;MACF,OAAO,MAAM;QACX,IAAIA,QAAQ,EAAE;UACZH,UAAU,CAACU,SAAS,CAAC;QACvB;MACF,CAAC;IACH;EACF,CAAC,EAAE,EAAE,CAAC;EACNnB,OAAO,CAAC,MAAM;IACZ,IAAIQ,OAAO,IAAIJ,IAAI,IAAIC,IAAI,EAAE;MAC3BM,OAAO,CAACH,OAAO,CAAC;IAClB;EACF,CAAC,EAAE,CAACA,OAAO,EAAEJ,IAAI,EAAEC,IAAI,CAAC,CAAC;EACzB,OAAO;IACLG,OAAO;IACPC;EACF,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}