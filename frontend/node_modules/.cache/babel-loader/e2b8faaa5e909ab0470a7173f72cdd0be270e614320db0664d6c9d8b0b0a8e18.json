{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport { useEventProperties, useSettingProperties } from '@uiw/react-amap-utils';\nexport var useAutoComplete = function useAutoComplete(props) {\n  if (props === void 0) {\n    props = {};\n  }\n  var [autoComplete, setAutoComplete] = useState();\n  useEffect(() => {\n    if (AMap && !autoComplete) {\n      var instance;\n      if (AMap.v) {\n        AMap.plugin(['AMap.Autocomplete'], () => {\n          instance = new AMap.Autocomplete(props);\n          setAutoComplete(instance);\n        });\n      } else {\n        AMap.plugin(['AMap.AutoComplete'], () => {\n          instance = new AMap.AutoComplete(props);\n          setAutoComplete(instance);\n        });\n      }\n      return () => {\n        if (instance) {\n          setAutoComplete(undefined);\n        }\n      };\n    }\n  }, []);\n  useSettingProperties(autoComplete, props, ['Type', 'City', 'CityLimit']);\n  useEventProperties(autoComplete, props, ['onChoose', 'onSelect']);\n  return {\n    autoComplete,\n    setAutoComplete\n  };\n};","map":{"version":3,"names":["useState","useEffect","useEventProperties","useSettingProperties","useAutoComplete","props","autoComplete","setAutoComplete","AMap","instance","v","plugin","Autocomplete","AutoComplete","undefined"],"sources":["/Users/mingyang/Desktop/Application/AIGC/urban track/streetview app/node_modules/@uiw/react-amap-auto-complete/esm/useAutoComplete.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useEventProperties, useSettingProperties } from '@uiw/react-amap-utils';\nexport var useAutoComplete = function useAutoComplete(props) {\n  if (props === void 0) {\n    props = {};\n  }\n  var [autoComplete, setAutoComplete] = useState();\n  useEffect(() => {\n    if (AMap && !autoComplete) {\n      var instance;\n      if (AMap.v) {\n        AMap.plugin(['AMap.Autocomplete'], () => {\n          instance = new AMap.Autocomplete(props);\n          setAutoComplete(instance);\n        });\n      } else {\n        AMap.plugin(['AMap.AutoComplete'], () => {\n          instance = new AMap.AutoComplete(props);\n          setAutoComplete(instance);\n        });\n      }\n      return () => {\n        if (instance) {\n          setAutoComplete(undefined);\n        }\n      };\n    }\n  }, []);\n  useSettingProperties(autoComplete, props, ['Type', 'City', 'CityLimit']);\n  useEventProperties(autoComplete, props, ['onChoose', 'onSelect']);\n  return {\n    autoComplete,\n    setAutoComplete\n  };\n};"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,kBAAkB,EAAEC,oBAAoB,QAAQ,uBAAuB;AAChF,OAAO,IAAIC,eAAe,GAAG,SAASA,eAAeA,CAACC,KAAK,EAAE;EAC3D,IAAIA,KAAK,KAAK,KAAK,CAAC,EAAE;IACpBA,KAAK,GAAG,CAAC,CAAC;EACZ;EACA,IAAI,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGP,QAAQ,CAAC,CAAC;EAChDC,SAAS,CAAC,MAAM;IACd,IAAIO,IAAI,IAAI,CAACF,YAAY,EAAE;MACzB,IAAIG,QAAQ;MACZ,IAAID,IAAI,CAACE,CAAC,EAAE;QACVF,IAAI,CAACG,MAAM,CAAC,CAAC,mBAAmB,CAAC,EAAE,MAAM;UACvCF,QAAQ,GAAG,IAAID,IAAI,CAACI,YAAY,CAACP,KAAK,CAAC;UACvCE,eAAe,CAACE,QAAQ,CAAC;QAC3B,CAAC,CAAC;MACJ,CAAC,MAAM;QACLD,IAAI,CAACG,MAAM,CAAC,CAAC,mBAAmB,CAAC,EAAE,MAAM;UACvCF,QAAQ,GAAG,IAAID,IAAI,CAACK,YAAY,CAACR,KAAK,CAAC;UACvCE,eAAe,CAACE,QAAQ,CAAC;QAC3B,CAAC,CAAC;MACJ;MACA,OAAO,MAAM;QACX,IAAIA,QAAQ,EAAE;UACZF,eAAe,CAACO,SAAS,CAAC;QAC5B;MACF,CAAC;IACH;EACF,CAAC,EAAE,EAAE,CAAC;EACNX,oBAAoB,CAACG,YAAY,EAAED,KAAK,EAAE,CAAC,MAAM,EAAE,MAAM,EAAE,WAAW,CAAC,CAAC;EACxEH,kBAAkB,CAACI,YAAY,EAAED,KAAK,EAAE,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;EACjE,OAAO;IACLC,YAAY;IACZC;EACF,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}